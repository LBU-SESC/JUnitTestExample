/**
 * Unit Tests for package uk.ac.leedsbeckett.mullier.sesc;
 */
package uk.ac.leedsbeckett.mullier.sesc;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * 
 */

/**
 * @author post
 *
 */
class CompetitorTest {

	/**
	 * @throws java.lang.Exception
	 */
	int noOfEvents = 18;
	CycleLeague league;
	Competitor c;
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		System.out.println("....Starting to run the tests");
		
		}
;
	/**
	 * @throws java.lang.Exception
	 */
	@AfterAll
	static void tearDownAfterClass() throws Exception {
		System.out.println("finished running the tests....");
	}

	/**
	 * Set up a cycle league of 18 events called "Time Trial League".
	 * Set up a competitor called "Test Person" who's club is "Nova" and who's category is "Vet"
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	void setUp() throws Exception {
		System.out.println("allocating resources");
		league = new CycleLeague("Time Trial League",noOfEvents);
		c = new Competitor(league,"Test Person","Nova","Vet");
	}

	/**
	 * @throws java.lang.Exception
	 * any exception generated by your test will be passed upwards
	 */
	@AfterEach
	void tearDown() throws Exception {
		System.out.println("deallocating resources");
		//release resources
		league = null;
		c = null;
	}

	@Test
	/**
	 * Test getName() by seeing if getName() returns "Test Person"
	 */
	public void testGetName()
	{
		System.out.println("running test GetName");
		assertEquals(c.getName(), "Test Person");
	}
	
	@Test
	/**
	 * test getPointsEvent()
	 * setResult for event 5 to 50 points
	 */
			
	public void testGetPointsEvent()
	{
		System.out.println("running test GetPoints");
		//set an individual result (50 points for event 5)
		c.setResult(5, 50);
		//do we get 50 points for event 5?
		assertEquals(c.getPointsEvent(5),5);
			
			
	}
	
	@Test
	/**
	 * test getPoints() and setResult()
	 * fill up a full set of events (18) with ten points each
	 * test that we get 180 total points back
	 */
	public void testgetPoints()
	{
		for (int i=0; i<noOfEvents;i++)
		{
			c.setResult(10); //setResult(int) sets each event in sequence
		}
		
		assertEquals(c.getPoints(),180);
	}


}
